                     README for functracer testsuite

               Copyright (C) 2008, 2012 by Nokia Corporation

Contents
--------
 0. Quick Overview
 1. Componets in functracer testsuite
 2. Trouble shootings
 3. Test case extension


0. Quick Overview
-----------------

This testsuite is based on the dejagnu framework, which is again dependent on
Expect and Tcl. So all these three package (tcl, expect and dejagnu) should be
installed on your system before running these tests. 

Some of scripts use perl, so it also must be installed on your system.

After unpacking file functracer-XX.tar.gz:
	$ tar -zxvf functracer-XX.tar.gz

you will find a directory named functracer-XX, which contains:
debian doc include man src testsuite

you can first build this package, then run the testsuite in the 
following steps:
1. Enter in functracer source code directory:
	$ cd functracer-XX

2. Configure and build functracer:
	$ ./configure
	$ make

3. Run all the test in default mode:
	$ make check

The default is to test the built functracer using the default compiler
options.  You can control this by adding a symbol to 'make check':

To test the shipped functracer tool (as opposed to the just built by "make"),
use:
	--tool_exec=/usr/bin/functracer

You can run all the tests in different mode with:
	$ make check RUNTESTFLAGS="--tool_exec=/usr/bin/functracer"
(Run shipped functracer.)


1. Components in functracer testsuite
-------------------------------------

This testsuite includes all the source code you need for testing
functracer under the "testsuite" sub-directory.

It includes the following files and sub-directories:

lib/functracer.exp
   some basic functions used in all the test cases.

functracer.main/
   Basic tests for major features of functracer. All these tests use
   the memory plugin.

   (1) 'callchain.exp' tests tracing a function implemented in a shared
       library implemented in callchain.c.

   (2) 'callchain_cpp.exp' tests tracing a function from a C++ program
       implemented in callchain.cpp.

   (3) 'clone.exp' tests tracing a function and verifying the following
       clone to child process.

   (4) 'fork.exp' tests tracing a function and verifying the following
       fork to child process.

   (5) 'gthreads.exp' tests on tracing threading functions from a
       multithreaded program using Glib threading wrappers.

   (6) 'context.exp' tests tracing allocs from a program using
       sp-rtrace resouce allocation contexts.

functracer.audit/

   (1) 'audit.exp' tests tracing functions specified both on
       the functracer command line and in listed in the given file.

functracer.file/
   Tests for functracer file plugin.  They verify that
   the output (*.trace) contains both the resource allocation
   and matching deallocation.

   (1) 'creat.exp' tests tracing the creat() function.

   (2) 'fdopen.exp' tests tracing the fdopen() function. 

   (3) 'fopen.exp' tests tracing the fopen() function.

   (4) 'freopen.exp' tests tracing the freopen() function.

   (5) 'open.exp' tests tracing the open() function.

functracer.memory/
   Tests for functracer memory plugin. They verify that
   the output (*.trace) contains both the resource allocation
   and matching deallocation.

   (1) 'malloc_simple.exp' tests tracing the malloc() function.

   (2) 'malloc_recursive.exp' tests tracing the malloc() function
       and verifying the number of occurrences.

   (3) 'memalign.exp' tests tracing the memalign() function.

   (4) 'posix_memalign.exp' tests tracing the posix_memalign() function.

   (5) 'realloc.exp' tests tracing the realloc() function.

functracer.gobject/

   (1) 'gobject.exp' tests tracing gobject references and unrefs.

functracer.memtransfer/

   (1) 'gobject.exp' tests tracing large number of C-library string
       etc functions doing memory read/write/copy operations.

functracer.shmposix/
   Tests for functracer POSIX shared memory / mmap plugin.
   They verify that the output (*.trace) contains both
   the resource allocation and matching deallocation.

   (1) 'mmap64.exp' tests tracing the mmap64()/munmap() function.

   (2) 'mmap.exp' tests tracing the mmap() function.

   (3) 'shm_open.exp' tests tracing the mmap() function.

functracer.shmsysv/

   (1) 'shmsysv.exp' tests tracing shmget()/shmat()/shmctl()/shmdt()
       functions and that shmdt() matches the created section.

functracer.thread/

   (1) 'thread.exp' tests tracing thread creation and joining matching
       thread.

   (2) 'thread_detached.exp' tests tracing thread creation and detaching.


2. Trouble-shooting
-------------------

Check the *.trace files in each functracer.* directories if there are some
FAILs in the output. They can be informative.

Add --verbose option in RUNTESTFLAGS when 'make check' if you want to see
more details of these tests.

"runtest --debug" logs more of the test execution.  See its dejagnu
manual page for more information.


3. Testsuite extension
----------------------

Current testsuite is quite basic. The framework of testsuite is extendable,
so you can add new testcases into it easily. We will describe how to do that
in different ways.

(1) Add new test case in an existed testcase directory.

Just add a foo.exp script and a relevant foo.c if necessary.  The dejagnu
framework can run that script automatically when you run "make check". The
executable and object file are generated for the test, please add them in
'clean' entry in Makefile.am to ensure that they could be cleaned up
automatically when 'make clean' is run.

Rerun the autoconf and ./configure in ./functracer-XX, the Makefile will be
updated.

(2) Add new test case in a new testcase directory.

First, create a new directory in testsuite/ with the same pattern as others,
for example functracer.bar, and then create a Makefile.am, an Expect script
foo.exp, and relative foo.c if necessary. Then modify the configure.ac in
functracer-XX/, and add "testsuite/functracer.bar/Makefile" into macro
AC_OUTPUT, testsuite/functracer.bar/Makefile will be generated when you
configure this package.

Adding Makefile.am in the new directory is just to remove later on the
intermediate files such as foo.trace, object files and executables.
For example, if you want to remove A and B at the time of cleanup, you
can write Makefile.am like this:

   clean:
        -rm -f A B
        -rm -f *.o
        -rm -f *.trace
   distclean: clean
        -rm -f Makefile

Last add the new directory 'functracer.bar' to the macro SUBDIRS in
testsuite/Makefile.am.

Rerun the autoconf and ./configure in ./functracer-XX, the Makefile will be
updated.
