# This file is part of Functracer.
#
# Copyright (C) 2008 by Nokia Corporation
# Copyright (C) 1997-2007 Juan Cespedes <cespedes@debian.org>
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA
#
# Based on testsuite code from ltrace.

set testfile "fork"
set srcfile ${testfile}.c
set binfile ${testfile}

verbose "remove any *.rtrace.txt ....."
catch "exec sh -c {rm -rf ${srcdir}/${subdir}/*.rtrace.txt}"

verbose "compiling source file now....."
if { [ ft_compile "${srcdir}/${subdir}/${testfile}.c" "${srcdir}/${subdir}/${binfile}" executable {debug} ] != "" } {
     send_user "Testcase compile failed, so all tests in this file will automatically fail.\n"
}

# set options for functracer
ft_options "-s" "-r" "-f" "-l" "${srcdir}/${subdir}/" "-e" "${srcdir}/../src/modules/.libs/memory.so" 

# Run PUT for functracer.
set exec_output [ft_runtest $srcdir/$subdir $srcdir/$subdir/$binfile]

# Check the output of this program.
verbose "ft runtest output: $exec_output\n"

# Verify the output by matching the malloc/free on .trace files.
set id_pattern {^([0-9]+)\. \[[0-9]+:[0-9]+:[0-9]+\.[0-9]+\]}
set pattern2 { free\\($1\\)}

catch "exec sh -c {ls ${srcdir}/${subdir}/*.rtrace.txt}" files
verbose "files = $files"
set file [lindex $files 0]
verbose "parent file = $file"

set pattern1 { malloc\(123\) = (0x[0-9a-f]+)}
ft_verify_output_match $file "parent: malloc(123)" $pattern1 $pattern2 $id_pattern

set pattern1 { malloc\(789\) = (0x[0-9a-f]+)}
ft_verify_output_match $file "parent: malloc(789)" $pattern1 $pattern2 $id_pattern

set file [lindex $files 1]
verbose "child file = $file"
set pattern1 { malloc\(456\) = (0x[0-9a-f]+)}
ft_verify_output_match $file "child: malloc(456)" $pattern1 $pattern2 $id_pattern
