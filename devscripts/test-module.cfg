# This file is part of sp-rtrace package.
#
# Copyright (C) 2010 by Nokia Corporation
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA

# This is a sample configuration file to demonstrate the configuration
# sections recognized by the module-template template.
# It compiles into simple module that traces close, fopen, fclose 
# calls.

[module]
version = 1.0
name = memory
description = Test module to demonstrate functracer configuration for rtrace-module-gen code generation script.

[resource]
name = memory
description = memory allocation in bytes
flags = 

[resource]
name = fd
description = file descriptor
flags = 

[function]
symbol_name = __libc_malloc
report_name = malloc
resource = memory
# resource size is the first argument
res_size = fn_argument(proc, 0)
# resource identifier is the returned address
res_id = rc
# allocation failure check - function return value is null
fail = rc == 0

[function]
symbol_name = __libc_calloc
report_name = calloc
resource = memory
# resource size is the block size multiplied by the block count
res_size = fn_argument(proc, 0) * fn_argument(proc, 1)  
# resource identifier is the returned address
res_id = rc
# allocation failure check - function return value is null
fail = rc == 0

[function]
symbol_name = posix_memalign
report_name = posix_memalign
resource = memory
res_size = fn_argument(proc, 2)
# resource identifiers is passed as a reference to a pointer in the first argument.
# So first read the pointer address with fn_argument() and then read the address
# contents with trace_mem_readw()
res_id = trace_mem_readw(proc, fn_argument(proc, 0))
# posix_memalign fails if the return code is not zero
fail = rc != 0

[function]
symbol_name = __libc_free
report_name = free
resource = memory
res_size = 0
res_id = fn_argument(proc, 0)


[function]
symbol_name = __open
report_name = open
resource = fd
res_size = 1
res_id = rc
fail = rc == -1
# define the filename argument
args[] = ARG_STR("filename:", 0)
# define the flags argument
args[] = ARG_INT("flags:", 1)

