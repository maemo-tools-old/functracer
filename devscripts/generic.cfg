# This file is part of sp-rtrace package.
#
# Copyright (C) 2010 by Nokia Corporation
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA

# This is a sample configuration file to demonstrate the configuration
# sections recognized by the module-template template.
# It compiles into simple module that traces close, fopen, fclose 
# calls.


[impl]
# Defines additional include files to be included at the start of module.
# For example:
#   include[] = fcntl.h
# include[] = <include file>


[module]
# module version, <major>.<minor>
version = 1.0

# short module name, must contain only alphanumeric characters
name = <name>

# long module description
description = <description>


[resource]
# resource name, must contain only alphanumeric characters
name = <name>

# long resource description
description = <description

# resource flags, separated with '|'. The supported flags are:
#   refcount - specifies reference counted resource
flags = <flags>


[function]
# function prototype
proto = <prototype>

# type of the resource, allocated/freed by the function. Must match one
# of the resource names defined in [resource] sections.
resource = <resource.name>

# resource identifier. The expression is a string containing python code
# that evaluates to C code for resource id retrieval. The following 
# template functions can be used to access the arguments:
#   ARG('<name>') - get the value of the argument <name>, defined in prototype
#   REF(<ptr>)    - get the value reffered by pointer <ptr>.
#   'rc'          - evaluates to the function return value.
# For example:
#   proto = int posix_memalign(void **memptr, size_t alignment, size_t size)
#   res_id = REF(ARG('memptr'))
#   res_size = ARG('size')
res_id = <expression to get resource id>

# resource size. The expression is a string containing python code that
# evaluates to C code for resource size retrieval. It can use the same template
# functions as resource identifier expression. For example:
#   proto = void* calloc(size_t nmemb, size_t size)
#   res_id = 'rc'
#   res_size = '(%s * %s)' % (ARG('size'), ARG('nmemb'))
res_size = <expression to get resource size>

# function arguments. The args[] items defines function arguments that must
# be reported for this function. The following agument types can be used:
#   ArgStr('<arg name>') - string argument, printed as plain text
#   ArgInt('<arg name>') - integer argument, printed in decimal format
#   ArgHex('<arg name>') - integer argument, printed in hexadecimal format
# Where <arg name> is the argument name as it's defined in function prototype.
# For example:
#   proto = int open(const char* filename, int mode)
#   args[] = ArgStr('filename')
#   args[] = ArgHex('mode')
#args[] = ArgXXX('<arg name>')

# The symbol name, optional. Defines the exact symbolic name of function to be tracked.
# The function prototype name is used if symbol_name is not defined.
#symbol_name = <symbol name>

# The report name, optional. Defines the name to be reported. 
# The function prototype name is used if report_name is not defined.
#report_name = <reporting name>

# The functracer specific name, optional. Defines the exact name used by functracer
# to track the function. The symbol_name or function prototype name is used if
# the ft_name is not defined.
#ft_name = <functracer name>

# Enforces synchronization for the function. This item must be set for sp-rtrace modules
# if the function is called from libc backtrace() function. Otherwise there can be
# deadlocks/infinite recursion.
#sync = <True>

