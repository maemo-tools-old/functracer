# This file is part of sp-rtrace package.
#
# Copyright (C) 2010 by Nokia Corporation
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA

# This is a sample configuration file to demonstrate the configuration
# sections recognized by the module-template template.
# It compiles into simple module that traces close, fopen, fclose 
# calls.


[impl]
# Defines additional include files to be included at the start of module.
# For example:
#   include[] = fcntl.h
include[] = fcntl.h


[module]
version = 1.0
name = shmposix
description = Posix shared memory tracking module.


[resource]
name = pshmmap
description = posix shared memory mapping
flags =

[resource]
name = fshmmap
description = file mapping
flags =

[resource]
name = shmmap
description = generic memory mapping
flags =

[resource]
name = pshmobj
description = posix shared memory object
flags =

[resource]
name = pshmfd
description = opened posix shared memory object
flags =

[function]
proto = int shm_open(const char *name, int oflag, mode_t mode)
resource = pshmobj
res_id = ARG('name')
res_size = '1'
args[] = ArgStr('name')
args[] = ArgHex('oflag')
args[] = ArgHex('mode')

[function]
proto = int shm_unlink(const char *name)
resource = pshmobj
res_id = ARG('name')
res_size = '0'
args[] = ArgStr('name')


[function]
proto = int open(const char *pathname, int flags)
resource = pshmobj
res_id = ARG('pathname')
res_size = '1'

[function]
proto = int open64(const char *pathname, int flags)
resource = pshmobj
res_id = ARG('pathname')
res_size = '1'

[function]
proto = int creat(const char *pathname, mode_t mode)
resource = pshmobj
res_id = ARG('pathname')
res_size = '1'


[function]
proto =  void* mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset)
resource = pshmmap
res_id = 'rc'
res_size = ARG('length')
args[] = ArgHex('length')
args[] = ArgHex('prot')
args[] = ArgHex('flags')
args[] = ArgHex('fd')
args[] = ArgHex('offset')

[function]
proto =  void* mmap2(void *addr, size_t length, int prot, int flags, int fd, off_t pgoffset)
resource = pshmmap
res_id = 'rc'
res_size = ARG('length')
args[] = ArgHex('length')
args[] = ArgHex('prot')
args[] = ArgHex('flags')
args[] = ArgHex('fd')
args[] = ArgHex('pgoffset')


[function]
proto =  void* mmap64(void *addr, size_t length, int prot, int flags, int fd, off64_t offset)
resource = pshmmap
res_id = 'rc'
res_size = ARG('length')
args[] = ArgHex('length')
args[] = ArgHex('prot')
args[] = ArgHex('flags')
args[] = ArgHex('fd')
args[] = ArgHex('offset')

[function]
proto =  int munmap(void *addr, size_t length)
resource = pshmmap
res_id = ARG('addr')
res_size = 0
args[] = ArgInt('length')



