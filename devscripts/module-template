<script>
def ARG(name):
	return "fn_argument(proc, %d)" % func.name2index(name)
	
def REF(name):
	return "trace_mem_readw(proc, %s)" % name
	
	
class ArgStr:
	def __init__(self, name):
		self.name = name

	def getName(self):
		return "\"%s\"" % self.name

	def calcValue(self):
		return "char arg_%s[PATH_MAX]; trace_mem_readstr(proc, fn_argument(proc, %s), arg_%s, sizeof(arg_%s));" % \
		    (self.name, func.name2index(self.name), self.name, self.name)

	def getValue(self):
		return "arg_%s" % self.name

class ArgHex:
	def __init__(self, name):
		self.name = name
	
	def getName(self):
		return "\"%s\"" % self.name
		
	def calcValue(self):
		return "char arg_%s[16]; snprintf(arg_%s, sizeof(arg_%s), \"0x%%lx\", fn_argument(proc, %s));" % \
			(self.name, self.name, self.name, func.name2index(self.name))
		
	def getValue(self):
		return "arg_%s" % self.name

class ArgInt:
	def __init__(self, name):
		self.name = name
	
	def getName(self):
		return "\"%s\"" % self.name
		
	def calcValue(self):
		return "char arg_%s[16]; snprintf(arg_%s, sizeof(arg_%s), \"%%ld\", fn_argument(proc, %s));" % \
			(self.name, self.name, self.name, func.name2index(self.name))
		
	def getValue(self):
		return "arg_%s" % self.name

</script>

/*
 * <$module.name> is a functracer module
 * <$module.description>
 *
 * This file is part of Functracer.
 *
 * Copyright (C) 2010 by Nokia Corporation
 *
 * Contact: Eero Tamminen <eero.tamminen@nokia.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 *
 */

#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <limits.h>
#include <sp_rtrace_formatter.h>
#include <sp_rtrace_defs.h>

#include "debug.h"
#include "function.h"
#include "options.h"
#include "plugins.h"
#include "process.h"
#include "report.h"
#include "target_mem.h"
#include "context.h"

#define MODULE_API_VERSION "2.0"

static char module_api_version[] = MODULE_API_VERSION;

/* resource identifiers */
<set res_index = 1>
<for resource in sections("resource")>
<set flags = "SP_RTRACE_RESOURCE_DEFAULT">
<if resource.flags.find("refcount") != -1>
  <set flags = "%s | SP_RTRACE_RESOURCE_REFCOUNT" % flags>
</if>
static sp_rtrace_resource_t res_<$resource.name> = {
	.type = "<$resource.name>",
	.desc = "<$resource.description>",
	.flags = <$flags>,
	.id = <$res_index>,
};
<set res_index = res_index + 1>

</for>

static void module_function_exit(struct process *proc, const char *name)
{
	struct rp_data *rd = proc->rp_data;
	int is_free = 0;
	assert(proc->rp_data != NULL);
	addr_t rc = fn_return_value(proc);
	
	if (false);
	<for function in sections("function")>
	  <set func = Function(function.proto)>
	  <if hasattr(function, "ft_symname")>
	    <set symname = function.ft_name>
	  <else>
	    <if hasattr(function, "symbol_name")>
	      <set symname = function.symbol_name>
	    <else>
	      <set symname = func.name>
	    </if>
	  </if>
	  <if hasattr(function, "report_name")>
	    <set repname = function.report_name>
	  <else>
	    <set repname = func.name>
	  </if>
	else if (strcmp(name, "<$symname>") == 0) {
<!-- add call failure check -->
		<if hasattr(function, "fail")>
		if (<$eval(function.fail)>) return;
		</if>
<!-- determine call type (allocation/free) -->
		<if eval(function.res_size) == '0'>
		  <set type = "SP_RTRACE_FTYPE_FREE">
		is_free = 1;
		<else>
		  <set type = "SP_RTRACE_FTYPE_ALLOC">
		</if>
<!-- define the call structure data -->
		sp_rtrace_fcall_t call = {
			.type = <$type>,
			.context = context_mask,
			.timestamp = RP_TIMESTAMP,
			.res_type = (void*)res_<$function.resource>.type,
			.res_type_flag = SP_RTRACE_FCALL_RFIELD_NAME,
			.name = "<$repname>",
			.res_id = (pointer_t)<$eval(function.res_id)>,
			.res_size = (size_t)<$eval(function.res_size)>,
			.index = rd->rp_number,
		};
		sp_rtrace_print_call(rd->fp, &call);
		
<!-- process arguments -->
		<if hasattr(function, "args")>
<!-- first format argument values -->
		  <for arg in function.args>
		    <set argobj = eval(arg)>
		<$argobj.calcValue()>
		  </for>
<!-- then prepare argument data structure -->
		sp_rtrace_farg_t args[] = {
		  <for arg in function.args>
		    <set argobj = eval(arg)>
			{.name=<$argobj.getName()>, .value=<$argobj.getValue()>},
		  </for>
			{0}
		};
		sp_rtrace_print_args(rd->fp, args);
		</if>
	}
	</for>
	else {
		msg_warn("unexpected function exit (%s)\n", name);
		return;
	}
	(rd->rp_number)++;
	if (!is_free || arguments.enable_free_bkt) {
		rp_write_backtraces(proc);
	}
	else {
		sp_rtrace_print_comment(rd->fp, "\n"); 
	}
}

static int module_library_match(const char *symname)
{
	return(
		<for function in sections("function")>
		  <set func = Function(function.proto)>
		  <if hasattr(function, "ft_name")>
		    <set symname = function.ft_name>
		  <else>
		    <if hasattr(function, "symbol_name")>
		      <set symname = function.symbol_name>
		    <else>
		      <set symname = func.name>
		    </if>
		  </if>
		strcmp(symname, "<$symname>") == 0 ||
		</for>
		false);
}

static void module_report_init(struct process *proc)
{
	assert(proc->rp_data != NULL);
	<for resource in sections("resource")>
	sp_rtrace_print_resource(proc->rp_data->fp, &res_<$resource.name>);
	</for>
}

struct plg_api *init()
{
	static struct plg_api ma = {
		.api_version = module_api_version,
		.function_exit = module_function_exit,
		.library_match = module_library_match,
		.report_init = module_report_init,
	};
	return &ma;
}
