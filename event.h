#ifndef ft_EVENT_H
#define ft_EVENT_H

#include <sys/types.h>

struct event {
	struct process *proc;
	enum {
		EV_BREAKPOINT,		/* breakpoint generated by functracker */
		EV_NOCHILD,		/* no more children */
		EV_PROC_EXIT,		/* process exited */
		EV_PROC_EXIT_SIGNAL,	/* process killed by a signal */
		EV_PROC_NEW,		/* new process created or attached */
		EV_SIGNAL,		/* process received a signal */
		EV_SYSCALL,		/* syscall entry */
		EV_SYSRET,		/* syscall return */
		EV_PTRACE,		/* ptrace() event */
		EV_UNKNOWN,		/* unknown event */
	} type;
	union {
		int retval;	/* EV_PROC_EXIT */
		int signo;	/* EV_SIGNAL, EV_PROC_EXIT_SIGNAL */
		int sysno;	/* EV_SYSCALL, EV_SYSRET */
		void *addr;	/* EV_BREAKPOINT */
		pid_t pid;	/* EV_PROC_NEW */
	} data;
};

extern int event_loop(void);

#endif /* ft_EVENT_H */
